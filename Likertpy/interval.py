"""
Module for computing the best interval for the x-ticks on a plot
"""

import typing
import numpy as np


class Interval:
    def __init__(self):
        pass

    def get_next_interval_divisor(self) -> typing.Generator[int, None, None]:
        """
         Generates a sequence of progressively increasing interval divisors.

        This generator starts with a predefined set of useful interval values
        (5, 10, 25, and 50), and then continues with successive powers of 10
        (e.g., 100, 1000, 10000, etc.). It is designed to provide flexible
        interval values for tasks like axis scaling or grid spacing in visualizations.

        Yields:
            int: The next interval divisor in the sequence.
        """
        yield 5
        yield 10
        yield 25
        yield 50
        i = 1
        while True:
            i += 1
            yield 10**i

    def get_biggest_divisor(self, n: int) -> int:
        """
        Finds the largest divisor of a given number from a predefined sequence of divisors.

        This method iterates through divisors generated by `get_next_interval_divisor()`
        and returns the largest one that divides the input number `n` without leaving a remainder.
        The sequence of divisors is assumed to grow indefinitely, ensuring a result is always found
        for valid input.

        Args:
            n (int): The number for which the largest divisor will be determined.

        Returns:
            int: The largest divisor of `n` from the generated sequence.

        Raises:
            RuntimeError: If the sequence of divisors does not grow indefinitely.
                (This is a safeguard and should never be triggered under normal operation.)

        Example:
            >>> instance.get_biggest_divisor(100)
            50
            >>> instance.get_biggest_divisor(15)
            5
        """
        biggest_divisor = 1
        for divisor in self.get_next_interval_divisor():
            if divisor > n:
                return biggest_divisor

            if n % divisor == 0:
                biggest_divisor = divisor

        raise RuntimeError(
            "this should never be reached because get_next_interval_divisor returns increasingly big numbers"
        )  # needed for type-checking

    def get_best_interval_in_list(self, candidate_intervals: typing.List[int]) -> int:
        """
        Selects the best interval from a list based on its largest divisor.

        This method evaluates a list of candidate intervals, computes the largest divisor 
        (using `get_biggest_divisor`) for each interval, and returns the interval associated 
        with the largest divisor. If there are ties, the first interval with the largest divisor 
        is selected.

        Args:
            candidate_intervals (List[int]): A list of integers representing possible intervals.

        Returns:
            best_interval (int): The interval with the largest divisor among the candidates.

        Example:
            >>> instance.get_best_interval_in_list([15, 20, 25])
            20
            >>> instance.get_best_interval_in_list([10, 16, 18])
            10
        """
        candidate_divisors = list(map(self.get_biggest_divisor, candidate_intervals))
        best_candidate = np.argmax(candidate_divisors)
        best_interval = candidate_intervals[best_candidate]

        return best_interval

    def get_interval_for_scale(self, tick_space: int, max_width: int) -> int:
        """
        Determines the optimal interval between tick marks for a plot's scale.

        Based on the plot's width (`max_width`) and a suggested number of tick marks (`tick_space`), 
        this method calculates the best interval to use between tick marks. The interval is chosen 
        to balance the spacing and ensure the scale remains readable.

        Args:
            tick_space (int): The desired approximate number of tick marks on the scale.
            max_width (int): The width of the plot or axis in pixels or units.

        Returns:
            int: The optimal interval to use between tick marks.

        Example:
            >>> instance.get_interval_for_scale(tick_space=10, max_width=100)
            10
            >>> instance.get_interval_for_scale(tick_space=15, max_width=120)
            8
        """
        min_ticks = tick_space - 5
        min_ticks = 1 if min_ticks <= 0 else min_ticks
        max_ticks = tick_space + 2

        # Ensure zero can't be an interval
        min_interval = max(1, int(max_width / max_ticks))
        max_interval = max(1, round(max_width / min_ticks))

        candidate_intervals = list(range(min_interval, max_interval + 1))
        return self.get_best_interval_in_list(candidate_intervals)
